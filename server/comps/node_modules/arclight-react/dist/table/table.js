import React from "react";
import PropTypes from "prop-types";
import clsx from "clsx";
import { lighten, makeStyles } from "@material-ui/core/styles";
import Table from "@material-ui/core/Table";
import TableBody from "@material-ui/core/TableBody";
import TableCell from "@material-ui/core/TableCell";
import TableContainer from "@material-ui/core/TableContainer";
import TableHead from "@material-ui/core/TableHead";
import TablePagination from "@material-ui/core/TablePagination";
import TableRow from "@material-ui/core/TableRow";
import TableSortLabel from "@material-ui/core/TableSortLabel";
import Toolbar from "@material-ui/core/Toolbar";
import Typography from "@material-ui/core/Typography";
import Paper from "@material-ui/core/Paper";
import Checkbox from "@material-ui/core/Checkbox";
import IconButton from "@material-ui/core/IconButton";
import Tooltip from "@material-ui/core/Tooltip";
import FormControlLabel from "@material-ui/core/FormControlLabel";
import Switch from "@material-ui/core/Switch";
import DeleteIcon from "@material-ui/icons/Delete";
import FilterListIcon from "@material-ui/icons/FilterList";
import Styles from "./styles";

function desc(a, b, orderBy) {
  if (b[orderBy] < a[orderBy]) {
    return -1;
  }

  if (b[orderBy] > a[orderBy]) {
    return 1;
  }

  return 0;
}

function stableSort(array, cmp) {
  const stabilizedThis = array.map((el, index) => [el, index]);
  stabilizedThis.sort((a, b) => {
    const order = cmp(a[0], b[0]);
    if (order !== 0) return order;
    return a[1] - b[1];
  });
  return stabilizedThis.map(el => el[0]);
}

function getSorting(order, orderBy) {
  return order === "desc" ? (a, b) => desc(a, b, orderBy) : (a, b) => -desc(a, b, orderBy);
}

function format(value, format) {
  switch (format) {
    case "usd":
      return value < 0 ? "-$" + (value * -1).toFixed(2) : "$" + value.toFixed(2);

    case "percentage":
      return (value * 100).toFixed(2) + "%";
  }

  return value;
}

function EnhancedTableHead(props) {
  const {
    classes,
    onSelectAllClick,
    order,
    orderBy,
    numSelected,
    rowCount,
    onRequestSort
  } = props;

  const createSortHandler = property => event => {
    onRequestSort(event, property);
  };

  return React.createElement(TableHead, null, React.createElement(TableRow, null, React.createElement(TableCell, {
    padding: "checkbox"
  }, React.createElement(Checkbox, {
    indeterminate: numSelected > 0 && numSelected < rowCount,
    checked: rowCount > 0 && numSelected === rowCount,
    onChange: onSelectAllClick,
    inputProps: {
      "aria-label": "select all desserts"
    }
  })), props.headCells.map(headCell => React.createElement(TableCell, {
    key: headCell.id,
    align: headCell.numeric ? "center" : "left",
    padding: headCell.disablePadding ? "none" : "default",
    sortDirection: orderBy === headCell.id ? order : false
  }, React.createElement(TableSortLabel, {
    active: orderBy === headCell.id,
    direction: orderBy === headCell.id ? order : "asc",
    onClick: createSortHandler(headCell.id)
  }, headCell.label, orderBy === headCell.id ? React.createElement("span", {
    className: classes.visuallyHidden
  }, order === "desc" ? "sorted descending" : "sorted ascending") : null)))));
}

EnhancedTableHead.propTypes = {
  classes: PropTypes.object.isRequired,
  numSelected: PropTypes.number.isRequired,
  onRequestSort: PropTypes.func.isRequired,
  onSelectAllClick: PropTypes.func.isRequired,
  order: PropTypes.oneOf(["asc", "desc"]).isRequired,
  orderBy: PropTypes.string.isRequired,
  rowCount: PropTypes.number.isRequired
};

const EnhancedTableToolbar = props => {
  const style = Styles[props.style].toolbar();
  const {
    numSelected
  } = props;
  return React.createElement(Toolbar, {
    className: clsx(style.root, {
      [style.highlight]: numSelected > 0
    })
  }, numSelected > 0 ? React.createElement(Typography, {
    className: style.title,
    color: "inherit",
    variant: "subtitle1"
  }, numSelected, " selected") : React.createElement(Typography, {
    className: style.title,
    variant: "h4",
    id: "tableTitle"
  }, props.title), numSelected > 0 ? React.createElement("div", null, React.cloneElement(props.selectionDial, {
    inheritedData: props.inheritedData
  })) : React.createElement("div", null, React.cloneElement(props.dial, {
    inheritedData: props.inheritedData
  })));
};

EnhancedTableToolbar.propTypes = {
  numSelected: PropTypes.number.isRequired
};
export default function EnhancedTable(props) {
  const style = Styles[props.style].enhancedTable();
  const style2 = Styles[props.style].enhancedTableWrapper();
  const style3 = Styles[props.style].tableCell();
  const [order, setOrder] = React.useState("asc");
  const [orderBy, setOrderBy] = React.useState("calories");
  const [selected, setSelected] = React.useState([]);
  const [page, setPage] = React.useState(0);
  const [rowsPerPage, setRowsPerPage] = React.useState(5);

  const handleRequestSort = (event, property) => {
    const isAsc = orderBy === property && order === "asc";
    setOrder(isAsc ? "desc" : "asc");
    setOrderBy(property);
  };

  const handleSelectAllClick = event => {
    const key_name = Object.keys(Object.values(props.data)[0])[0];

    if (event.target.checked) {
      const newSelecteds = props.data.map(n => n[key_name]);
      setSelected(newSelecteds);
      return;
    }

    setSelected([]);
  };

  const handleClick = (event, name) => {
    const selectedIndex = selected.indexOf(name);
    let newSelected = [];

    if (selectedIndex === -1) {
      newSelected = newSelected.concat(selected, name);
    } else if (selectedIndex === 0) {
      newSelected = newSelected.concat(selected.slice(1));
    } else if (selectedIndex === selected.length - 1) {
      newSelected = newSelected.concat(selected.slice(0, -1));
    } else if (selectedIndex > 0) {
      newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));
    }

    setSelected(newSelected);
  };

  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = event => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  const isSelected = name => selected.indexOf(name) !== -1;

  const emptyRows = rowsPerPage - Math.min(rowsPerPage, props.data.length - page * rowsPerPage);
  return React.createElement("div", {
    className: style2.root
  }, React.createElement("div", {
    className: style.root
  }, React.createElement(Paper, {
    className: style.paper
  }, React.createElement(EnhancedTableToolbar, {
    title: props.title,
    numSelected: selected.length,
    dial: props.dial,
    selectionDial: props.selectionDial,
    inheritedData: Object.assign({
      selected
    }, props),
    style: props.style
  }), React.createElement(TableContainer, null, React.createElement(Table, {
    className: style.table,
    "aria-labelledby": "tableTitle",
    size: props.dense ? "small" : "medium",
    "aria-label": "enhanced table"
  }, React.createElement(EnhancedTableHead, {
    classes: style,
    numSelected: selected.length,
    order: order,
    orderBy: orderBy,
    onSelectAllClick: handleSelectAllClick,
    onRequestSort: handleRequestSort,
    rowCount: props.data.length,
    headCells: props.headCells.map(el => {
      el["disablePadding"] = true;
      return el;
    })
  }), React.createElement(TableBody, null, stableSort(props.data, getSorting(order, orderBy)).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => {
    const isItemSelected = isSelected(row.item);
    const labelId = `enhanced-table-checkbox-${index}`;
    const array = Object.values(row);
    const item = array[0];
    const values = array.slice(1);
    return React.createElement(TableRow, {
      hover: true,
      onClick: event => handleClick(event, item),
      role: "checkbox",
      "aria-checked": isItemSelected,
      tabIndex: -1,
      key: item,
      selected: isItemSelected
    }, React.createElement(TableCell, {
      padding: "checkbox"
    }, React.createElement(Checkbox, {
      checked: isItemSelected,
      inputProps: {
        "aria-labelledby": labelId
      }
    })), React.createElement(TableCell, {
      component: "th",
      id: labelId,
      scope: "row",
      padding: "none"
    }, item), values.map((el, i) => React.createElement(TableCell, {
      align: "center",
      className: style3.root
    }, props.headCells[i + 1].format ? format(el, props.headCells[i + 1].format) : el)));
  }), emptyRows > 0 && React.createElement(TableRow, {
    style: {
      height: (props.dense ? 33 : 53) * emptyRows
    }
  }, React.createElement(TableCell, {
    colSpan: 6
  }))))), React.createElement(TablePagination, {
    rowsPerPageOptions: [5, 10, 25, 50],
    component: "div",
    count: props.data.length,
    rowsPerPage: rowsPerPage,
    page: page,
    onChangePage: handleChangePage,
    onChangeRowsPerPage: handleChangeRowsPerPage
  }))));
}