function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from "react";
import styled from "styled-components";
import theme from "../themes";
import { XYPlot, XAxis, YAxis, VerticalGridLines, HorizontalGridLines, LineMarkSeries, Crosshair } from "react-vis";
import Zoom from "@material-ui/core/Zoom";
import AutoSizer from "react-virtualized-auto-sizer";
import { Checkbox, MaterialIcon, _DataTable_, _SeriesSelection_, Img, Transition } from "../index";
const LineChart = styled.div`
  margin: 20px;
  position: relative;
`;
const CustomIcon = styled.div`
  position: absolute;
  top: 25px;
  right: 25px;
  z-index: 100;
  pointer-events: none;
`;
const NoneSelected = styled.div`
  position: absolute;
  top: 25%;
  left: 50%;
  -webkit-transform: translate(-50%, -25%),
  -ms-transform: translate(-50%, -25%),
  transform: translate(-50%, -25%),
`;
const Tooltip = styled.div`
  white-space: nowrap;
  margin: 20px;
  background-color: ${props => theme[props._theme].backgroundColor};
  border-radius: 4px;
  padding: 20px;
  color: ${props => theme[theme[props._theme].complement].backgroundColor};
  & .body {
    margin-bottom: -20px;
    & img {
      border-radius: 50%;
      width: 25px;
    }
  }
`;

const Lines = props => {
  const crosshairValues = props.crosshairValue ? Object.keys(props.data).filter(el => props.data[el].visible ? props.data[el] : null).map(el => {
    props.data[el].data[props.crosshairValue.index].series = el;
    props.data[el].data[props.crosshairValue.index].xUnit = props.data[el].xAxis;
    props.data[el].data[props.crosshairValue.index].yUnit = props.data[el].yAxis;
    props.data[el].data[props.crosshairValue.index].img = props.data[el].img;
    return props.data[el].data[props.crosshairValue.index];
  }) : null;
  return /*#__PURE__*/React.createElement("div", {
    style: {
      height: props.height,
      color: theme[theme[props.theme].complement].textColor
    }
  }, props.locked ? /*#__PURE__*/React.createElement(CustomIcon, null, /*#__PURE__*/React.createElement(MaterialIcon, {
    icon: "lock"
  })) : /*#__PURE__*/React.createElement(CustomIcon, null, /*#__PURE__*/React.createElement(MaterialIcon, {
    icon: "lockopen"
  })), props.lineSeries && props.lineSeries.length > 0 && props.data && Object.values(props.data)[0] ? /*#__PURE__*/React.createElement("h3", null, Object.values(props.data)[0].yAxis) : null, /*#__PURE__*/React.createElement(AutoSizer, null, ({
    height,
    width
  }) => /*#__PURE__*/React.createElement(XYPlot, {
    width: width,
    height: height,
    onMouseLeave: () => !props.locked ? props.setCrosshairValue(null) : null,
    onNearestX: (value, {
      index
    }) => !this.props.locked && false ? this.props.setCrosshairValue({
      value,
      index
    }) : null,
    onClick: () => props.setLocked(!props.locked)
  }, props.showAxis ? /*#__PURE__*/React.createElement(XAxis, {
    style: {
      line: {
        stroke: theme[props.theme].backgroundColor
      },
      ticks: {
        stroke: theme[props.theme].backgroundColor
      },
      text: {
        stroke: theme[theme[props.theme].complement].textColor
      }
    }
  }) : null, props.showAxis ? /*#__PURE__*/React.createElement(YAxis, {
    style: {
      line: {
        stroke: theme[props.theme].backgroundColor
      },
      ticks: {
        stroke: theme[props.theme].backgroundColor
      },
      text: {
        stroke: theme[theme[props.theme].complement].textColor
      }
    }
  }) : null, props.lineSeries.length > 0 ? props.lineSeries : null, props.crosshairValue && crosshairValues ? /*#__PURE__*/React.createElement(Crosshair, {
    values: crosshairValues,
    style: {
      line: {
        backgroundColor: theme[props.theme].backgroundColor,
        width: "2px",
        borderRadius: "50% 50% 0px 0px",
        height: props.height - 50,
        marginTop: "0px",
        marginLeft: "-1px"
      }
    }
  }, /*#__PURE__*/React.createElement(Tooltip, {
    _theme: props.theme
  }, /*#__PURE__*/React.createElement("h2", {
    style: {
      marginBottom: "-5px",
      marginTop: "-10px"
    }
  }, crosshairValues[0].x, " ", crosshairValues[0].xUnit), crosshairValues.sort((a, b) => b.y > a.y ? 1 : -1).map((el, i) => /*#__PURE__*/React.createElement("div", {
    className: "body"
  }, /*#__PURE__*/React.createElement("table", null, /*#__PURE__*/React.createElement("tbody", null, /*#__PURE__*/React.createElement("tr", null, el.img ? /*#__PURE__*/React.createElement("td", null, /*#__PURE__*/React.createElement(Img, {
    src: el.img
  })) : null, /*#__PURE__*/React.createElement("td", null, /*#__PURE__*/React.createElement("h3", {
    style: {
      marginLeft: `${i * 0}px`,
      display: "inline-flex"
    }
  }, el.series, ": ", el.y.toFixed(props.decimal)), " ", /*#__PURE__*/React.createElement("p", {
    style: {
      display: "inline-flex"
    }
  }, el.yUnit))))))))) : null, props.showGridLines ? /*#__PURE__*/React.createElement(VerticalGridLines, {
    style: props.verticalGridLineStyle
  }) : null, props.showGridLines ? /*#__PURE__*/React.createElement(HorizontalGridLines, {
    style: props.horizontalGridLineStyle
  }) : null)), props.lineSeries && props.lineSeries.length > 0 && props.data && Object.values(props.data)[0] ? /*#__PURE__*/React.createElement("h3", {
    style: {
      position: "absolute",
      right: 0,
      bottom: -75
    }
  }, Object.values(props.data)[0].xAxis) : null, !props.lineSeries || props.lineSeries.length <= 0 ? /*#__PURE__*/React.createElement(NoneSelected, null, /*#__PURE__*/React.createElement("h1", null, "No series selected")) : null);
};

class CustomLineChart extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      locked: false,
      crosshairValue: null,
      data: this.props.data
    });
  }

  componentDidMount() {
    const tempState = this.state;
    Object.values(tempState.data).map(obj => {
      obj.visible = true;
    });
    this.setState(tempState);
  }

  render() {
    const marginOffset = 20;
    return /*#__PURE__*/React.createElement(Transition, {
      trans: this.props.trans
    }, /*#__PURE__*/React.createElement(LineChart, null, /*#__PURE__*/React.createElement("table", {
      width: "100%"
    }, /*#__PURE__*/React.createElement("tbody", null, /*#__PURE__*/React.createElement("tr", null, !this.props.hideSeriesSelection ? /*#__PURE__*/React.createElement("td", null, /*#__PURE__*/React.createElement("div", {
      style: {
        marginLeft: `-${marginOffset}px`,
        marginRight: `${marginOffset * 2}px`
      }
    }, /*#__PURE__*/React.createElement(_SeriesSelection_, {
      theme: this.props.theme,
      data: this.state.data,
      cb: el => {
        this.state.data[el].visible = !this.state.data[el].visible;
        this.setState({
          crosshairValue: this.state.crosshairValue,
          locked: this.state.locked,
          data: this.state.data
        });
      }
    }))) : null, /*#__PURE__*/React.createElement("td", {
      width: "85%",
      align: "left"
    }, this.state.data ? /*#__PURE__*/React.createElement(Lines, {
      theme: this.props.theme,
      decimal: this.props.decimal,
      setCrosshairValue: crosshairValue => this.setState({
        crosshairValue,
        locked: this.state.locked,
        data: this.state.data
      }),
      setLocked: locked => this.setState({
        crosshairValue: this.state.crosshairValue,
        locked,
        data: this.state.data
      }),
      locked: this.state.locked,
      crosshairValue: this.state.crosshairValue,
      data: this.state.data,
      showAxis: this.props.showAxis,
      showGridLines: this.props.showGridLines,
      height: this.props.height,
      verticalGridLineStyle: {
        opacity: 0
      },
      horizontalGridLineStyle: {
        opacity: 0.15
      },
      lineSeries: (() => {
        const _series_ = Object.values(this.state.data);

        let series = _series_.map((series, i) => /*#__PURE__*/React.createElement(LineMarkSeries, {
          curve: "curveMonotoneX",
          opacity: 1,
          color: theme[this.props.theme].lineSeries[i % theme[this.props.theme].lineSeries.length],
          onNearestX: (value, {
            index
          }) => !this.state.locked ? this.setState({
            crosshairValue: {
              value,
              index
            },
            locked: this.state.locked,
            data: this.state.data
          }) : null,
          data: series.data,
          animation: "wobbly",
          fill: "transparent",
          stroke: 0
        }));

        return series.filter((el, i) => _series_[i].visible ? el : null);
      })()
    }) : null)))), /*#__PURE__*/React.createElement(_DataTable_, {
      theme: theme[this.props.theme].complement,
      crosshairValue: this.state.crosshairValue,
      data: this.state.data,
      decimal: this.props.decimal,
      dataTableColumns: this.props.dataTableColumns
    })));
  }

}

export default CustomLineChart;