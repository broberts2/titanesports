import React from "react";
import PropTypes from "prop-types";
import clsx from "clsx";
import { lighten, makeStyles } from "@material-ui/core/styles";
import Table from "@material-ui/core/Table";
import TableBody from "@material-ui/core/TableBody";
import TableCell from "@material-ui/core/TableCell";
import TableContainer from "@material-ui/core/TableContainer";
import TableHead from "@material-ui/core/TableHead";
import TablePagination from "@material-ui/core/TablePagination";
import TableRow from "@material-ui/core/TableRow";
import TableSortLabel from "@material-ui/core/TableSortLabel";
import Toolbar from "@material-ui/core/Toolbar";
import Typography from "@material-ui/core/Typography";
import Paper from "@material-ui/core/Paper";
import Checkbox from "@material-ui/core/Checkbox";
import IconButton from "@material-ui/core/IconButton";
import Tooltip from "@material-ui/core/Tooltip";
import FormControlLabel from "@material-ui/core/FormControlLabel";
import Switch from "@material-ui/core/Switch";
import DeleteIcon from "@material-ui/icons/Delete";
import FilterListIcon from "@material-ui/icons/FilterList";
import Box from "@material-ui/core/Box";
import Collapse from "@material-ui/core/Collapse";
import KeyboardArrowDownIcon from "@material-ui/icons/KeyboardArrowDown";
import KeyboardArrowUpIcon from "@material-ui/icons/KeyboardArrowUp";
import Grow from "@material-ui/core/Grow";
import styled from "styled-components";
import { _SearchBar_, Transition } from "../index";
import theme from "../themes";
import "../css-overwrites.css";

function descendingComparator(a, b, orderBy) {
  if (b[orderBy] < a[orderBy]) {
    return -1;
  }

  if (b[orderBy] > a[orderBy]) {
    return 1;
  }

  return 0;
}

function getComparator(order, orderBy) {
  return order === "desc" ? (a, b) => descendingComparator(a, b, orderBy) : (a, b) => -descendingComparator(a, b, orderBy);
}

function stableSort(array, comparator) {
  const stabilizedThis = array.map((el, index) => [el, index]);
  stabilizedThis.sort((a, b) => {
    const order = comparator(a[0], b[0]);
    if (order !== 0) return order;
    return a[1] - b[1];
  });
  return stabilizedThis.map(el => el[0]);
}

function EnhancedTableHead(props) {
  const {
    classes,
    onSelectAllClick,
    order,
    orderBy,
    numSelected,
    rowCount,
    onRequestSort
  } = props;

  const createSortHandler = property => event => {
    onRequestSort(event, property);
  };

  return /*#__PURE__*/React.createElement(TableHead, null, /*#__PURE__*/React.createElement(TableRow, null, /*#__PURE__*/React.createElement(TableCell, {
    padding: "checkbox",
    style: {
      borderColor: theme[props.theme].textColor
    }
  }, /*#__PURE__*/React.createElement(Checkbox, {
    indeterminate: numSelected > 0 && numSelected < rowCount,
    checked: rowCount > 0 && numSelected === rowCount,
    onChange: onSelectAllClick,
    inputProps: {
      "aria-label": "select all desserts"
    },
    style: {
      color: theme[props.theme].textColor
    }
  })), props.headCells.map(headCell => /*#__PURE__*/React.createElement(TableCell, {
    key: headCell.id,
    align: headCell.numeric ? "right" : "left",
    padding: headCell.disablePadding ? "none" : "default",
    sortDirection: orderBy === headCell.id ? order : false,
    style: {
      color: theme[props.theme].textColor,
      fontWeight: "bold",
      fontSize: "18px",
      borderColor: theme[props.theme].textColor
    }
  }, /*#__PURE__*/React.createElement(TableSortLabel, {
    active: orderBy === headCell.id,
    direction: orderBy === headCell.id ? order : "asc",
    onClick: createSortHandler(headCell.id),
    style: {
      color: theme[props.theme].textColor
    }
  }, headCell.label, orderBy === headCell.id ? /*#__PURE__*/React.createElement("span", {
    className: classes.visuallyHidden
  }, order === "desc" ? "sorted descending" : "sorted ascending") : null))), /*#__PURE__*/React.createElement(TableCell, {
    style: {
      borderColor: theme[props.theme].textColor
    }
  })));
}

EnhancedTableHead.propTypes = {
  classes: PropTypes.object.isRequired,
  numSelected: PropTypes.number.isRequired,
  onRequestSort: PropTypes.func.isRequired,
  onSelectAllClick: PropTypes.func.isRequired,
  order: PropTypes.oneOf(["asc", "desc"]).isRequired,
  orderBy: PropTypes.string.isRequired,
  rowCount: PropTypes.number.isRequired
};
const useToolbarStyles = makeStyles(theme => ({
  root: {
    paddingLeft: theme.spacing(2),
    paddingRight: theme.spacing(1)
  },
  highlight: theme.palette.type === "light" ? {
    color: theme.palette.secondary.main,
    backgroundColor: lighten(theme.palette.secondary.light, 0.85)
  } : {
    color: theme.palette.text.primary,
    backgroundColor: theme.palette.secondary.dark
  },
  title: {
    flex: "1 1 100%"
  }
}));

const EnhancedTableToolbar = props => {
  const classes = useToolbarStyles();
  const {
    numSelected
  } = props;
  return /*#__PURE__*/React.createElement(Toolbar, null, /*#__PURE__*/React.createElement(Typography, {
    className: classes.title,
    variant: "h6",
    id: "tableTitle",
    component: "div"
  }, props.title), /*#__PURE__*/React.createElement(_SearchBar_, {
    placeholder: "Search",
    filters: props.filters,
    filtersRight: props.filtersRight,
    width: "100%"
  }));
};

EnhancedTableToolbar.propTypes = {
  numSelected: PropTypes.number.isRequired
};

const useStyles = props => makeStyles(theme => {
  return {
    root: {
      width: "calc(100% - 30px)",
      backgroundColor: props.themes[props.theme].backgroundColor,
      padding: "15px",
      borderRadius: "5px",
      color: props.themes[props.theme].textColor,
      stickyHeader: true
    },
    paper: {
      width: "100%",
      marginBottom: theme.spacing(2),
      color: props.themes[props.theme].textColor,
      backgroundColor: props.themes[props.theme].backgroundColor
    },
    table: {
      minWidth: 1000,
      backgroundColor: props.themes[props.theme].primaryColor,
      color: props.themes[props.theme].textColor
    },
    tableRow: {
      color: props.themes[props.theme].textColor
    },
    visuallyHidden: {
      border: 0,
      clip: "rect(0 0 0 0)",
      height: 1,
      margin: -1,
      overflow: "hidden",
      padding: 0,
      position: "absolute",
      top: 20,
      width: 1
    }
  };
});

const CustomRow = props => {
  const [open, setOpen] = React.useState(false);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TableRow, {
    hover: true,
    role: "checkbox",
    "aria-checked": props.info.isItemSelected,
    tabIndex: -1,
    key: props.info.row.name,
    selected: props.info.isItemSelected
  }, /*#__PURE__*/React.createElement(TableCell, {
    padding: "checkbox",
    style: {
      borderColor: props.info.row.__collapse__ ? "transparent" : theme[props.info.theme].textColor
    }
  }, /*#__PURE__*/React.createElement(Transition, {
    trans: props.animation ? {
      animation: props.animation,
      delay: props.index * 0.25
    } : null
  }, /*#__PURE__*/React.createElement(Checkbox, {
    onClick: event => props.info.handleClick(event, props.info.row.name),
    checked: props.info.isItemSelected,
    inputProps: {
      "aria-labelledby": props.info.labelId
    },
    style: {
      color: theme[props.info.theme].textColor
    }
  }))), /*#__PURE__*/React.createElement(TableCell, {
    component: "th",
    id: props.info.labelId,
    scope: "row",
    padding: "none",
    style: {
      color: theme[props.info.theme].textColor,
      borderColor: props.info.row.__collapse__ ? "transparent" : theme[props.info.theme].textColor
    }
  }, /*#__PURE__*/React.createElement(Transition, {
    trans: props.animation ? {
      animation: props.animation,
      delay: props.index * 0.25
    } : null
  }, props.info.row.name)), Object.keys(props.info.row).filter(el => el !== "name" && el !== "__collapse__" ? el : null).map((value, i) => /*#__PURE__*/React.createElement(TableCell, {
    align: "right",
    style: {
      color: theme[props.info.theme].textColor,
      borderColor: props.info.row.__collapse__ ? "transparent" : theme[props.info.theme].textColor
    }
  }, /*#__PURE__*/React.createElement(Transition, {
    trans: props.animation ? {
      animation: props.animation,
      delay: props.index * 0.25
    } : null
  }, props.info.row[value]))), /*#__PURE__*/React.createElement(TableCell, {
    align: "right",
    style: {
      borderColor: props.info.row.__collapse__ ? "transparent" : theme[props.info.theme].textColor
    }
  }, props.info.row.__collapse__ ? /*#__PURE__*/React.createElement(IconButton, {
    "aria-label": "expand row",
    size: "small",
    onClick: () => setOpen(!open),
    style: {
      color: theme[props.info.theme].textColor
    }
  }, open ? /*#__PURE__*/React.createElement(KeyboardArrowUpIcon, null) : /*#__PURE__*/React.createElement(KeyboardArrowDownIcon, null)) : null)), props.info.row.__collapse__ ? /*#__PURE__*/React.createElement(TableRow, {
    hover: true
  }, /*#__PURE__*/React.createElement(TableCell, {
    style: {
      paddingBottom: 0,
      paddingTop: 0,
      borderColor: theme[props.info.theme].textColor,
      color: theme[props.info.theme].textColor
    },
    colSpan: 12
  }, /*#__PURE__*/React.createElement(Collapse, {
    in: open,
    timeout: "auto",
    unmountOnExit: true
  }, /*#__PURE__*/React.createElement(Grow, {
    timeout: 500,
    in: true
  }, props.info.row.__collapse__)))) : null);
};

const EnhancedTable = props => {
  const classes = useStyles(props)();
  const [order, setOrder] = React.useState("asc");
  const [orderBy, setOrderBy] = React.useState("calories");
  const [selected, setSelected] = React.useState([]);
  const [page, setPage] = React.useState(0);
  const [dense, setDense] = React.useState(false);
  const [rowsPerPage, setRowsPerPage] = React.useState(5);

  const handleRequestSort = (event, property) => {
    const isAsc = orderBy === property && order === "asc";
    setOrder(isAsc ? "desc" : "asc");
    setOrderBy(property);
  };

  const handleSelectAllClick = event => {
    if (event.target.checked) {
      const newSelecteds = props.rows.map(n => n.name);
      setSelected(newSelecteds);
      return;
    }

    setSelected([]);
  };

  const handleClick = (event, name) => {
    const selectedIndex = selected.indexOf(name);
    let newSelected = [];

    if (selectedIndex === -1) {
      newSelected = newSelected.concat(selected, name);
    } else if (selectedIndex === 0) {
      newSelected = newSelected.concat(selected.slice(1));
    } else if (selectedIndex === selected.length - 1) {
      newSelected = newSelected.concat(selected.slice(0, -1));
    } else if (selectedIndex > 0) {
      newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));
    }

    setSelected(newSelected);
  };

  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = event => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  const handleChangeDense = event => {
    setDense(event.target.checked);
  };

  const isSelected = name => selected.indexOf(name) !== -1;

  const emptyRows = rowsPerPage - Math.min(rowsPerPage, props.rows.length - page * rowsPerPage);
  return /*#__PURE__*/React.createElement("div", {
    className: classes.root
  }, /*#__PURE__*/React.createElement(Paper, {
    className: classes.paper
  }, /*#__PURE__*/React.createElement(EnhancedTableToolbar, {
    title: props.title,
    filters: props.filters,
    filtersRight: props.filtersRight,
    numSelected: selected.length
  }), /*#__PURE__*/React.createElement(TableContainer, null, /*#__PURE__*/React.createElement(Table, {
    className: classes.table,
    rowClassName: classes.tableRow,
    "aria-labelledby": "tableTitle",
    size: dense ? "small" : "medium",
    "aria-label": "enhanced table"
  }, /*#__PURE__*/React.createElement(EnhancedTableHead, {
    theme: props.theme,
    classes: classes,
    numSelected: selected.length,
    order: order,
    orderBy: orderBy,
    onSelectAllClick: handleSelectAllClick,
    onRequestSort: handleRequestSort,
    rowCount: props.rows.length,
    headCells: props.headCells
  }), /*#__PURE__*/React.createElement(TableBody, null, stableSort(props.rows, getComparator(order, orderBy)).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => {
    const isItemSelected = isSelected(row.name);
    const labelId = `enhanced-table-checkbox-${index}`;
    return /*#__PURE__*/React.createElement(CustomRow, {
      animation: props.animation,
      index: index,
      info: {
        row,
        labelId,
        isItemSelected,
        rows: props.rows,
        theme: props.theme,
        order,
        orderBy,
        page,
        rowsPerPage,
        page,
        rowsPerPage,
        isSelected,
        handleClick
      }
    });
  }), emptyRows > 0 && /*#__PURE__*/React.createElement(TableRow, {
    style: {
      height: (dense ? 33 : 53) * emptyRows
    }
  }, /*#__PURE__*/React.createElement(TableCell, {
    colSpan: 6,
    style: {
      borderColor: "transparent"
    }
  }))))), /*#__PURE__*/React.createElement(TablePagination, {
    rowsPerPageOptions: [5, 10, 25],
    component: "div",
    count: props.rows.length,
    rowsPerPage: rowsPerPage,
    page: page,
    onChangePage: handleChangePage,
    onChangeRowsPerPage: handleChangeRowsPerPage,
    style: {
      color: theme[props.theme].textColor
    }
  })), /*#__PURE__*/React.createElement(FormControlLabel, {
    control: /*#__PURE__*/React.createElement(Switch, {
      checked: dense,
      onChange: handleChangeDense
    }),
    label: "Dense padding"
  }));
};

export default /*#__PURE__*/React.memo(props => /*#__PURE__*/React.createElement(Transition, {
  trans: props.trans
}, /*#__PURE__*/React.createElement(EnhancedTable, {
  title: props.title,
  filters: props.filters,
  filtersRight: props.filtersRight,
  headCells: props.headCells,
  rows: props.rows,
  theme: props.theme,
  themes: theme,
  animation: props.animation
})));