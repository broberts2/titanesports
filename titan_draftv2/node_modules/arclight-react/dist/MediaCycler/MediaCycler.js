function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from "react";
import styled from "styled-components";
import { Transition } from "../index";
import theme from "../themes";

const _MediaCycler = styled.div`
  width: ${props => props.width};
  height: ${props => props.height};
  position: relative;
  pointer-events: none;
`;

const Element1 = styled.div`
  width: 100%;
  height: 100%;
  & video {
    width: 100%;
    height: 100%;
  }
`;
const Element2 = styled.div`
  width: 100%;
  height: 100%;
  position: absolute;
  left: 0;
  top: 0;
  & video {
    width: 100%;
    height: 100%;
  }
`;

const shuffle = array => {
  const usedNums = {};
  const arr = [];

  const _ = n => {
    if (!usedNums[n]) {
      usedNums[n] = true;
      return array[n];
    } else {
      return _(Math.floor(Math.random() * array.length));
    }
  };

  while (Object.keys(usedNums).length < array.length) {
    arr.push(_(Math.floor(Math.random() * array.length)));
  }

  return arr;
};

export default class MediaCycler extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      element1: null,
      element2: null,
      elements: this.props.randomize ? shuffle(this.props.elements) : this.props.elements,
      interval: this.props.interval,
      transElement2: null,
      index: 0,
      action: 0
    });
  }

  set(src) {
    switch (this.props.type) {
      case "video":
        return /*#__PURE__*/React.createElement("video", {
          preload: true,
          loop: true,
          autoPlay: true,
          muted: true,
          src: src
        });

      case "img":
        return /*#__PURE__*/React.createElement("img", {
          src: src
        });
    }
  }

  incIndex() {
    return this.state.index = this.state.index >= this.state.elements.length - 1 ? 0 : this.state.index + 1;
  }

  doAction(i) {
    switch (i) {
      case 0:
        return this.state.elements.length > 2 ? this.setState({
          element1: this.set(this.state.elements[this.incIndex()])
        }) : null;

      case 1:
        return this.setState({
          transElement2: {
            animation: this.props.elementTransition.transOut.animation,
            duration: this.props.elementTransition.transOut.duration
          }
        });

      case 2:
        return this.state.elements.length > 2 ? this.setState({
          element2: this.set(this.state.elements[this.incIndex()])
        }) : this.incIndex();

      case 3:
        return this.setState({
          transElement2: {
            animation: this.props.elementTransition.transIn.animation,
            duration: this.props.elementTransition.transIn.duration
          }
        });
    }
  }

  componentDidMount() {
    this.setState({
      element1: this.set(this.state.elements[0]),
      intervalId: setInterval(() => {
        this.state.action = ++this.state.action > 3 ? 0 : this.state.action;
        this.doAction(this.state.action);
      }, this.state.interval * 500)
    });
  }

  componentWillUnmount() {
    clearInterval(this.state.intervalId);
  }

  render() {
    return /*#__PURE__*/React.createElement(Transition, {
      trans: this.props.trans
    }, /*#__PURE__*/React.createElement(_MediaCycler, {
      width: this.props.width,
      height: this.props.height
    }, /*#__PURE__*/React.createElement(Element1, null, this.state.element1), /*#__PURE__*/React.createElement(Element2, null, /*#__PURE__*/React.createElement(Transition, {
      trans: this.state.transElement2
    }, this.state.element2))));
  }

}